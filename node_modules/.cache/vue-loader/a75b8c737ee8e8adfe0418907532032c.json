{"remainingRequest":"/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lanre/vueprojects/webpexel/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lanre/vueprojects/webpexel/src/components/card.vue?vue&type=template&id=5c8289c0&scoped=true&","dependencies":[{"path":"/Users/lanre/vueprojects/webpexel/src/components/card.vue","mtime":1611783396527},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
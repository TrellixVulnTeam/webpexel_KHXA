{"remainingRequest":"/Users/lanre/webProject/webpexel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lanre/webProject/webpexel/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/lanre/webProject/webpexel/src/views/Home.vue","mtime":1613261647187},{"path":"/Users/lanre/webProject/webpexel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanre/webProject/webpexel/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lanre/webProject/webpexel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanre/webProject/webpexel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
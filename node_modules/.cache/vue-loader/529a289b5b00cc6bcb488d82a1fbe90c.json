{"remainingRequest":"/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lanre/vueprojects/webpexel/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lanre/vueprojects/webpexel/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/lanre/vueprojects/webpexel/src/views/Home.vue","mtime":1611791167365},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanre/vueprojects/webpexel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}